//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TBS.Gameplay.Input
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMove"",
            ""id"": ""0052b5e3-4d92-4060-b636-c52b46841937"",
            ""actions"": [
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""78be3248-3080-4615-99d9-01886416f6f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""714772f7-cb23-4b0d-8dad-c715f758e62a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6cfaa03b-500e-40e9-892a-78e621e7a211"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""83bbc041-4330-497a-8ec8-64bafe72c8a0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cc05e43e-bd6a-48d7-a175-8bbb5792c8a3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""86d9c77e-47ed-4e4c-bd41-febb2c46b781"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PCControlScheme"",
            ""bindingGroup"": ""PCControlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerMove
            m_PlayerMove = asset.FindActionMap("PlayerMove", throwIfNotFound: true);
            m_PlayerMove_MoveAction = m_PlayerMove.FindAction("MoveAction", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMove
        private readonly InputActionMap m_PlayerMove;
        private List<IPlayerMoveActions> m_PlayerMoveActionsCallbackInterfaces = new List<IPlayerMoveActions>();
        private readonly InputAction m_PlayerMove_MoveAction;
        public struct PlayerMoveActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerMoveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveAction => m_Wrapper.m_PlayerMove_MoveAction;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMove; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMoveActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerMoveActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Add(instance);
                @MoveAction.started += instance.OnMoveAction;
                @MoveAction.performed += instance.OnMoveAction;
                @MoveAction.canceled += instance.OnMoveAction;
            }

            private void UnregisterCallbacks(IPlayerMoveActions instance)
            {
                @MoveAction.started -= instance.OnMoveAction;
                @MoveAction.performed -= instance.OnMoveAction;
                @MoveAction.canceled -= instance.OnMoveAction;
            }

            public void RemoveCallbacks(IPlayerMoveActions instance)
            {
                if (m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerMoveActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerMoveActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerMoveActions @PlayerMove => new PlayerMoveActions(this);
        private int m_PCControlSchemeSchemeIndex = -1;
        public InputControlScheme PCControlSchemeScheme
        {
            get
            {
                if (m_PCControlSchemeSchemeIndex == -1) m_PCControlSchemeSchemeIndex = asset.FindControlSchemeIndex("PCControlScheme");
                return asset.controlSchemes[m_PCControlSchemeSchemeIndex];
            }
        }
        public interface IPlayerMoveActions
        {
            void OnMoveAction(InputAction.CallbackContext context);
        }
    }
}
